# THIS FILE IS AUTO-GENERATED BY yaml2py.
# DO NOT EDIT THIS FILE MANUALLY.

from typing import Any, Dict, List, Union, Optional
import os


class ConfigSchema:
    """
    配置架構基礎類，用於處理 YAML 配置的資料存取。

    提供方法來返回屬性名稱和值，並支援敏感信息的遮罩處理。
    """
    def __init__(self, data: Dict[str, Any]) -> None:
        """
        初始化 ConfigSchema 實例。

        參數：
            data (Dict[str, Any]): YAML 配置資料字典。
        """
        self._data = data
        
    def return_properties(self, return_type="list", mask_sensitive=True):
        """
        返回所有 @property 方法的名稱和對應的值。

        參數：
            return_type (str): 指定返回格式，'list' 返回列表，'dict' 返回字典。
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理。

        返回：
            list 或 dict: 包含 @property 名稱和值的列表或字典。
        """
        if return_type == "dict":
            payload = {}
        elif return_type == "list":
            payload = []
        else:
            raise ValueError("Invalid return_type. Must be 'list' or 'dict'.")

        sensitive_keywords = [
            "password", "pwd", "api_token", "token", "appkey", "secret", "key",
        ]

        def mask_value(value):
            """
            對敏感值進行遮罩處理。

            參數：
                value: 要遮罩的值。

            返回：
                str: 遮罩後的值。
            """
            value_str = str(value)
            if len(value_str) > 4:
                return value_str[:2] + "*" * (len(value_str) - 4) + value_str[-2:]
            return value

        for attr_name in dir(self):
            attr = getattr(self.__class__, attr_name, None)
            if isinstance(attr, property):
                try:
                    value = getattr(self, attr_name)
                    if mask_sensitive and any(
                        keyword.lower() in attr_name.lower()
                        for keyword in sensitive_keywords
                    ):
                        value = mask_value(value)
                except Exception as e:
                    value = "<Error: " + str(e) + ">"

                if return_type == "dict":
                    payload[attr_name] = value
                elif return_type == "list":
                    payload.append(str(attr_name) + ": " + str(value))

        return payload
    
    def to_dict(self) -> Dict[str, Any]:
        """
        將配置轉換為字典格式。
        
        返回：
            Dict[str, Any]: 配置資料字典。
        """
        return self._data.copy()
    
    def __repr__(self) -> str:
        """返回物件的字串表示。"""
        class_name = self.__class__.__name__
        props = self.return_properties(return_type="dict", mask_sensitive=True)
        return f"{class_name}({props})"
    
    def print_all(self, mask_sensitive=True):
        """
        以格式化的方式列印所有配置項目。
        
        參數：
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理（預設為 True）。
        """
        class_name = self.__class__.__name__
        print(f"\n{class_name}:")
        print("-" * 40)
        
        props = self.return_properties(return_type="list", mask_sensitive=mask_sensitive)
        for prop in props:
            print(f"  {prop}")
        print("-" * 40)


# ---------- GENERATED CLASSES START ----------
class SystemSchema(ConfigSchema):
    """[system] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def name(self) -> str:
        """Get name value"""
        return self._data.get('name', 'ASR_Hub')

    @property
    def version(self) -> str:
        """Get version value"""
        return self._data.get('version', '0.2.0')

    @property
    def mode(self) -> str:
        """Get mode value"""
        return self._data.get('mode', 'development')

    @property
    def debug(self) -> bool:
        """Get debug value"""
        return self._data.get('debug', True)


class SessionsSchema(ConfigSchema):
    """[sessions] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def max(self) -> int:
        """Get max value"""
        return self._data.get('max', 10)


class AudioQueueManagerSchema(ConfigSchema):
    """[audio_queue_manager] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def max_sessions(self) -> int:
        """Get max_sessions value"""
        return self._data.get('max_sessions', 1000)


class LoggingSchema(ConfigSchema):
    """[logging] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def path(self) -> str:
        """Get path value"""
        return self._data.get('path', './logs')

    @property
    def rotation(self) -> str:
        """Get rotation value"""
        return self._data.get('rotation', '100 MB')

    @property
    def retention(self) -> str:
        """Get retention value"""
        return self._data.get('retention', '30 days')

    @property
    def level(self) -> str:
        """Get level value"""
        return self._data.get('level', 'INFO')

    @property
    def format(self) -> str:
        """Get format value"""
        return self._data.get('format', 'detailed')


class HttpSseSchema(ConfigSchema):
    """[http_sse] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', '0.0.0.0')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 8000)

    @property
    def cors_enabled(self) -> bool:
        """Get cors_enabled value"""
        return self._data.get('cors_enabled', True)

    @property
    def max_connections(self) -> int:
        """Get max_connections value"""
        return self._data.get('max_connections', 100)

    @property
    def request_timeout(self) -> int:
        """Get request_timeout value"""
        return self._data.get('request_timeout', 300)


class WebsocketSchema(ConfigSchema):
    """[websocket] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', '0.0.0.0')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 8765)

    @property
    def max_message_size(self) -> int:
        """Get max_message_size value"""
        return self._data.get('max_message_size', 10485760)

    @property
    def ping_interval(self) -> int:
        """Get ping_interval value"""
        return self._data.get('ping_interval', 30)


class GrpcSchema(ConfigSchema):
    """[grpc] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', '0.0.0.0')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 50051)

    @property
    def max_receive_message_length(self) -> int:
        """Get max_receive_message_length value"""
        return self._data.get('max_receive_message_length', 10485760)


class SocketioSchema(ConfigSchema):
    """[socketio] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', '0.0.0.0')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 8766)

    @property
    def cors_allowed_origins(self) -> str:
        """Get cors_allowed_origins value"""
        return self._data.get('cors_allowed_origins', '*')


class RedisSchema(ConfigSchema):
    """[redis] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def host(self) -> str:
        """Get host value"""
        return self._data.get('host', 'localhost')

    @property
    def port(self) -> int:
        """Get port value"""
        return self._data.get('port', 6379)

    @property
    def db(self) -> int:
        """Get db value"""
        return self._data.get('db', 0)

    @property
    def password(self) -> Optional[Any]:
        """Get password value"""
        return self._data.get('password')

    @property
    def channel_prefix(self) -> str:
        """Get channel_prefix value"""
        return self._data.get('channel_prefix', 'asr_hub:')


class ApiSchema(ConfigSchema):
    """[api] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def http_sse(self) -> HttpSseSchema:
        """Get http_sse configuration"""
        return HttpSseSchema(self._data.get('http_sse', {}))

    @property
    def websocket(self) -> WebsocketSchema:
        """Get websocket configuration"""
        return WebsocketSchema(self._data.get('websocket', {}))

    @property
    def grpc(self) -> GrpcSchema:
        """Get grpc configuration"""
        return GrpcSchema(self._data.get('grpc', {}))

    @property
    def socketio(self) -> SocketioSchema:
        """Get socketio configuration"""
        return SocketioSchema(self._data.get('socketio', {}))

    @property
    def redis(self) -> RedisSchema:
        """Get redis configuration"""
        return RedisSchema(self._data.get('redis', {}))


class WakewordSchema(ConfigSchema):
    """[wakeword] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'openWakeWord')

    @property
    def model_path(self) -> str:
        """Get model_path value"""
        return self._data.get('model_path', 'models/hi_kmu_0721.onnx')

    @property
    def threshold(self) -> float:
        """Get threshold value"""
        return self._data.get('threshold', 0.5)

    @property
    def debounce_time(self) -> float:
        """Get debounce_time value"""
        return self._data.get('debounce_time', 2.0)

    @property
    def continuous_detection(self) -> bool:
        """Get continuous_detection value"""
        return self._data.get('continuous_detection', True)

    @property
    def inference_threads(self) -> int:
        """Get inference_threads value"""
        return self._data.get('inference_threads', 1)

    @property
    def use_quantized_model(self) -> bool:
        """Get use_quantized_model value"""
        return self._data.get('use_quantized_model', False)


class SileroSchema(ConfigSchema):
    """[silero] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def threshold(self) -> float:
        """Get threshold value"""
        return self._data.get('threshold', 0.5)

    @property
    def min_silence_duration(self) -> float:
        """Get min_silence_duration value"""
        return self._data.get('min_silence_duration', 0.5)

    @property
    def min_speech_duration(self) -> float:
        """Get min_speech_duration value"""
        return self._data.get('min_speech_duration', 0.25)

    @property
    def model_path(self) -> str:
        """Get model_path value"""
        return self._data.get('model_path', 'models/silero_vad.onnx')

    @property
    def model_name(self) -> str:
        """Get model_name value"""
        return self._data.get('model_name', 'silero_vad_v4')

    @property
    def use_gpu(self) -> bool:
        """Get use_gpu value"""
        return self._data.get('use_gpu', False)

    @property
    def adaptive_threshold(self) -> bool:
        """Get adaptive_threshold value"""
        return self._data.get('adaptive_threshold', False)

    @property
    def threshold_window_size(self) -> int:
        """Get threshold_window_size value"""
        return self._data.get('threshold_window_size', 50)

    @property
    def smoothing_window(self) -> int:
        """Get smoothing_window value"""
        return self._data.get('smoothing_window', 10)


class WebrtcSchema(ConfigSchema):
    """[webrtc] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def aggressiveness(self) -> int:
        """Get aggressiveness value"""
        return self._data.get('aggressiveness', 2)

    @property
    def frame_duration(self) -> int:
        """Get frame_duration value"""
        return self._data.get('frame_duration', 30)

    @property
    def padding_duration(self) -> int:
        """Get padding_duration value"""
        return self._data.get('padding_duration', 300)


class VadSchema(ConfigSchema):
    """[vad] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'silero')

    @property
    def silero(self) -> SileroSchema:
        """Get silero configuration"""
        return SileroSchema(self._data.get('silero', {}))

    @property
    def webrtc(self) -> WebrtcSchema:
        """Get webrtc configuration"""
        return WebrtcSchema(self._data.get('webrtc', {}))


class DenoiseSchema(ConfigSchema):
    """[denoise] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'rnnoise')

    @property
    def strength(self) -> float:
        """Get strength value"""
        return self._data.get('strength', 0.7)


class AudioFormatterSchema(ConfigSchema):
    """[audio_formatter] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def target_format(self) -> str:
        """Get target_format value"""
        return self._data.get('target_format', 'pcm')

    @property
    def channels(self) -> int:
        """Get channels value"""
        return self._data.get('channels', 1)

    @property
    def bits_per_sample(self) -> int:
        """Get bits_per_sample value"""
        return self._data.get('bits_per_sample', 16)

    @property
    def target_rate(self) -> int:
        """Get target_rate value"""
        return self._data.get('target_rate', 16000)

    @property
    def quality(self) -> str:
        """Get quality value"""
        return self._data.get('quality', 'high')


class StorageSchema(ConfigSchema):
    """[storage] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'file')

    @property
    def path(self) -> str:
        """Get path value"""
        return self._data.get('path', './recordings')


class VadControlSchema(ConfigSchema):
    """[vad_control] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def silence_countdown(self) -> float:
        """Get silence_countdown value"""
        return self._data.get('silence_countdown', 1.8)

    @property
    def min_recording_duration(self) -> float:
        """Get min_recording_duration value"""
        return self._data.get('min_recording_duration', 0.5)

    @property
    def pre_speech_buffer(self) -> float:
        """Get pre_speech_buffer value"""
        return self._data.get('pre_speech_buffer', 0.3)

    @property
    def post_speech_buffer(self) -> float:
        """Get post_speech_buffer value"""
        return self._data.get('post_speech_buffer', 0.2)


class SegmentationSchema(ConfigSchema):
    """[segmentation] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def segment_duration(self) -> float:
        """Get segment_duration value"""
        return self._data.get('segment_duration', 30.0)

    @property
    def overlap_duration(self) -> float:
        """Get overlap_duration value"""
        return self._data.get('overlap_duration', 0.5)


class MetadataSchema(ConfigSchema):
    """[metadata] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def include_vad_info(self) -> bool:
        """Get include_vad_info value"""
        return self._data.get('include_vad_info', True)

    @property
    def include_timestamps(self) -> bool:
        """Get include_timestamps value"""
        return self._data.get('include_timestamps', True)

    @property
    def save_path(self) -> str:
        """Get save_path value"""
        return self._data.get('save_path', './recordings/metadata')


class RecordingSchema(ConfigSchema):
    """[recording] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def format(self) -> str:
        """Get format value"""
        return self._data.get('format', 'wav')

    @property
    def sample_rate(self) -> int:
        """Get sample_rate value"""
        return self._data.get('sample_rate', 48000)

    @property
    def channels(self) -> int:
        """Get channels value"""
        return self._data.get('channels', 2)

    @property
    def max_duration(self) -> int:
        """Get max_duration value"""
        return self._data.get('max_duration', 60)

    @property
    def max_file_size(self) -> int:
        """Get max_file_size value"""
        return self._data.get('max_file_size', 100)

    @property
    def storage(self) -> StorageSchema:
        """Get storage configuration"""
        return StorageSchema(self._data.get('storage', {}))

    @property
    def vad_control(self) -> VadControlSchema:
        """Get vad_control configuration"""
        return VadControlSchema(self._data.get('vad_control', {}))

    @property
    def segmentation(self) -> SegmentationSchema:
        """Get segmentation configuration"""
        return SegmentationSchema(self._data.get('segmentation', {}))

    @property
    def metadata(self) -> MetadataSchema:
        """Get metadata configuration"""
        return MetadataSchema(self._data.get('metadata', {}))


class OperatorsSchema(ConfigSchema):
    """[operators] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def wakeword(self) -> WakewordSchema:
        """Get wakeword configuration"""
        return WakewordSchema(self._data.get('wakeword', {}))

    @property
    def vad(self) -> VadSchema:
        """Get vad configuration"""
        return VadSchema(self._data.get('vad', {}))

    @property
    def denoise(self) -> DenoiseSchema:
        """Get denoise configuration"""
        return DenoiseSchema(self._data.get('denoise', {}))

    @property
    def audio_formatter(self) -> AudioFormatterSchema:
        """Get audio_formatter configuration"""
        return AudioFormatterSchema(self._data.get('audio_formatter', {}))

    @property
    def recording(self) -> RecordingSchema:
        """Get recording configuration"""
        return RecordingSchema(self._data.get('recording', {}))


class AudioSchema(ConfigSchema):
    """[audio] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def default_sample_rate(self) -> int:
        """Get default_sample_rate value"""
        return self._data.get('default_sample_rate', 16000)

    @property
    def channels(self) -> int:
        """Get channels value"""
        return self._data.get('channels', 1)

    @property
    def encoding(self) -> str:
        """Get encoding value"""
        return self._data.get('encoding', 'int16')

    @property
    def buffer_size(self) -> int:
        """Get buffer_size value"""
        return self._data.get('buffer_size', 4096)


class AutoScaleSchema(ConfigSchema):
    """[auto_scale] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def scale_up_threshold(self) -> float:
        """Get scale_up_threshold value"""
        return self._data.get('scale_up_threshold', 0.8)

    @property
    def scale_down_threshold(self) -> float:
        """Get scale_down_threshold value"""
        return self._data.get('scale_down_threshold', 0.3)

    @property
    def scale_interval(self) -> float:
        """Get scale_interval value"""
        return self._data.get('scale_interval', 60.0)


class PoolConfigSchema(ConfigSchema):
    """[pool_config] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def min_size(self) -> int:
        """Get min_size value"""
        return self._data.get('min_size', 1)

    @property
    def max_size(self) -> int:
        """Get max_size value"""
        return self._data.get('max_size', 3)

    @property
    def idle_timeout(self) -> float:
        """Get idle_timeout value"""
        return self._data.get('idle_timeout', 300.0)

    @property
    def acquire_timeout(self) -> float:
        """Get acquire_timeout value"""
        return self._data.get('acquire_timeout', 30.0)

    @property
    def health_check_interval(self) -> float:
        """Get health_check_interval value"""
        return self._data.get('health_check_interval', 60.0)

    @property
    def auto_scale(self) -> AutoScaleSchema:
        """Get auto_scale configuration"""
        return AutoScaleSchema(self._data.get('auto_scale', {}))


class PoolSchema(ConfigSchema):
    """[pool] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def min_size(self) -> int:
        """Get min_size value"""
        return self._data.get('min_size', 1)

    @property
    def max_size(self) -> int:
        """Get max_size value"""
        return self._data.get('max_size', 3)


class WhisperSchema(ConfigSchema):
    """[whisper] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def model_size(self) -> str:
        """Get model_size value"""
        return self._data.get('model_size', 'base')

    @property
    def language(self) -> str:
        """Get language value"""
        return self._data.get('language', 'zh')

    @property
    def device(self) -> str:
        """Get device value"""
        return self._data.get('device', 'cuda')

    @property
    def compute_type(self) -> str:
        """Get compute_type value"""
        return self._data.get('compute_type', 'default')

    @property
    def beam_size(self) -> int:
        """Get beam_size value"""
        return self._data.get('beam_size', 5)

    @property
    def best_of(self) -> int:
        """Get best_of value"""
        return self._data.get('best_of', 5)

    @property
    def temperature(self) -> float:
        """Get temperature value"""
        return self._data.get('temperature', 0.0)

    @property
    def use_faster_whisper(self) -> bool:
        """Get use_faster_whisper value"""
        return self._data.get('use_faster_whisper', True)

    @property
    def initial_prompt(self) -> Optional[Any]:
        """Get initial_prompt value"""
        return self._data.get('initial_prompt')

    @property
    def vad_filter(self) -> bool:
        """Get vad_filter value"""
        return self._data.get('vad_filter', False)

    @property
    def model_path(self) -> str:
        """Get model_path value"""
        return self._data.get('model_path', './models/whisper')

    @property
    def pool(self) -> PoolSchema:
        """Get pool configuration"""
        return PoolSchema(self._data.get('pool', {}))


class FunasrSchema(ConfigSchema):
    """[funasr] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def model(self) -> str:
        """Get model value"""
        return self._data.get('model', 'paraformer')

    @property
    def language(self) -> str:
        """Get language value"""
        return self._data.get('language', 'zh')

    @property
    def device(self) -> str:
        """Get device value"""
        return self._data.get('device', 'cpu')

    @property
    def model_path(self) -> str:
        """Get model_path value"""
        return self._data.get('model_path', './models/funasr')


class VoskSchema(ConfigSchema):
    """[vosk] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def model_path(self) -> str:
        """Get model_path value"""
        return self._data.get('model_path', './models/vosk/vosk-model-cn-0.22')

    @property
    def sample_rate(self) -> int:
        """Get sample_rate value"""
        return self._data.get('sample_rate', 16000)


class GoogleSttSchema(ConfigSchema):
    """[google_stt] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def credentials_path(self) -> Optional[Any]:
        """Get credentials_path value"""
        return self._data.get('credentials_path')

    @property
    def language_code(self) -> str:
        """Get language_code value"""
        return self._data.get('language_code', 'zh-TW')

    @property
    def encoding(self) -> str:
        """Get encoding value"""
        return self._data.get('encoding', 'LINEAR16')

    @property
    def sample_rate(self) -> int:
        """Get sample_rate value"""
        return self._data.get('sample_rate', 16000)

    @property
    def enable_automatic_punctuation(self) -> bool:
        """Get enable_automatic_punctuation value"""
        return self._data.get('enable_automatic_punctuation', True)


class OpenaiSchema(ConfigSchema):
    """[openai] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', False)

    @property
    def api_key(self) -> str:
        """Get api_key value"""
        return self._data.get('api_key', '')

    @property
    def model(self) -> str:
        """Get model value"""
        return self._data.get('model', 'whisper-1')

    @property
    def language(self) -> str:
        """Get language value"""
        return self._data.get('language', 'zh')

    @property
    def temperature(self) -> float:
        """Get temperature value"""
        return self._data.get('temperature', 0.0)

    @property
    def base_url(self) -> str:
        """Get base_url value"""
        return self._data.get('base_url', 'https://api.openai.com/v1')


class ProvidersSchema(ConfigSchema):
    """[providers] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def default(self) -> str:
        """Get default value"""
        return self._data.get('default', 'whisper')

    @property
    def pool_config(self) -> PoolConfigSchema:
        """Get pool_config configuration"""
        return PoolConfigSchema(self._data.get('pool_config', {}))

    @property
    def whisper(self) -> WhisperSchema:
        """Get whisper configuration"""
        return WhisperSchema(self._data.get('whisper', {}))

    @property
    def funasr(self) -> FunasrSchema:
        """Get funasr configuration"""
        return FunasrSchema(self._data.get('funasr', {}))

    @property
    def vosk(self) -> VoskSchema:
        """Get vosk configuration"""
        return VoskSchema(self._data.get('vosk', {}))

    @property
    def google_stt(self) -> GoogleSttSchema:
        """Get google_stt configuration"""
        return GoogleSttSchema(self._data.get('google_stt', {}))

    @property
    def openai(self) -> OpenaiSchema:
        """Get openai configuration"""
        return OpenaiSchema(self._data.get('openai', {}))


class SystemListenerSchema(ConfigSchema):
    """[system_listener] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def always_on(self) -> bool:
        """Get always_on value"""
        return self._data.get('always_on', True)

    @property
    def buffer_size(self) -> int:
        """Get buffer_size value"""
        return self._data.get('buffer_size', 4096)

    @property
    def min_resource_mode(self) -> bool:
        """Get min_resource_mode value"""
        return self._data.get('min_resource_mode', True)


class ModelSchema(ConfigSchema):
    """[model] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def type(self) -> str:
        """Get type value"""
        return self._data.get('type', 'openWakeWord')

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def model_path(self) -> str:
        """Get model_path value"""
        return self._data.get('model_path', 'models/hi_kmu_0721.onnx')

    @property
    def threshold(self) -> float:
        """Get threshold value"""
        return self._data.get('threshold', 0.5)

    @property
    def language(self) -> str:
        """Get language value"""
        return self._data.get('language', 'zh-TW')

    @property
    def hf_repo_id(self) -> str:
        """Get hf_repo_id value"""
        return self._data.get('hf_repo_id', 'JTBTechnology/kmu_wakeword')

    @property
    def hf_filename(self) -> str:
        """Get hf_filename value"""
        return self._data.get('hf_filename', 'hi_kmu_0721.onnx')

    @property
    def hf_token(self) -> Optional[Any]:
        """Get hf_token value"""
        return self._data.get('hf_token')

    @property
    def inference_framework(self) -> str:
        """Get inference_framework value"""
        return self._data.get('inference_framework', 'onnxruntime')

    @property
    def use_gpu(self) -> bool:
        """Get use_gpu value"""
        return self._data.get('use_gpu', False)

    @property
    def batch_size(self) -> int:
        """Get batch_size value"""
        return self._data.get('batch_size', 1)

    @property
    def sample_rate(self) -> int:
        """Get sample_rate value"""
        return self._data.get('sample_rate', 16000)

    @property
    def window_size(self) -> int:
        """Get window_size value"""
        return self._data.get('window_size', 1280)

    @property
    def score_queue_size(self) -> int:
        """Get score_queue_size value"""
        return self._data.get('score_queue_size', 60)

    @property
    def cache_embeddings(self) -> bool:
        """Get cache_embeddings value"""
        return self._data.get('cache_embeddings', True)

    @property
    def preload_model(self) -> bool:
        """Get preload_model value"""
        return self._data.get('preload_model', True)


class WakeEventsSchema(ConfigSchema):
    """[wake_events] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def publish_to_api(self) -> bool:
        """Get publish_to_api value"""
        return self._data.get('publish_to_api', True)

    @property
    def include_audio_context(self) -> bool:
        """Get include_audio_context value"""
        return self._data.get('include_audio_context', False)

    @property
    def context_duration(self) -> float:
        """Get context_duration value"""
        return self._data.get('context_duration', 2.0)


class MultiSourceSchema(ConfigSchema):
    """[multi_source] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def ui_wake(self) -> bool:
        """Get ui_wake value"""
        return self._data.get('ui_wake', False)

    @property
    def visual_wake(self) -> bool:
        """Get visual_wake value"""
        return self._data.get('visual_wake', False)

    @property
    def gesture_wake(self) -> bool:
        """Get gesture_wake value"""
        return self._data.get('gesture_wake', False)


class WakeWordDetectionSchema(ConfigSchema):
    """[wake_word_detection] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def system_listener(self) -> SystemListenerSchema:
        """Get system_listener configuration"""
        return SystemListenerSchema(self._data.get('system_listener', {}))

    @property
    def wake_timeout(self) -> float:
        """Get wake_timeout value"""
        return self._data.get('wake_timeout', 3.0)

    @property
    def cooldown(self) -> float:
        """Get cooldown value"""
        return self._data.get('cooldown', 2.0)

    @property
    def models(self) -> List[ModelSchema]:
        """Get models list"""
        items = self._data.get('models', [])
        return [ModelSchema(item) for item in items]

    @property
    def wake_events(self) -> WakeEventsSchema:
        """Get wake_events configuration"""
        return WakeEventsSchema(self._data.get('wake_events', {}))

    @property
    def multi_source(self) -> MultiSourceSchema:
        """Get multi_source configuration"""
        return MultiSourceSchema(self._data.get('multi_source', {}))


class BusyModeSchema(ConfigSchema):
    """[busy_mode] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def enabled(self) -> bool:
        """Get enabled value"""
        return self._data.get('enabled', True)

    @property
    def continue_listening(self) -> bool:
        """Get continue_listening value"""
        return self._data.get('continue_listening', True)

    @property
    def buffer_audio(self) -> bool:
        """Get buffer_audio value"""
        return self._data.get('buffer_audio', True)

    @property
    def max_buffer_duration(self) -> float:
        """Get max_buffer_duration value"""
        return self._data.get('max_buffer_duration', 30.0)


class BufferSchema(ConfigSchema):
    """[buffer] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def size(self) -> int:
        """Get size value"""
        return self._data.get('size', 8192)

    @property
    def max_chunks(self) -> int:
        """Get max_chunks value"""
        return self._data.get('max_chunks', 1000)

    @property
    def overflow_strategy(self) -> str:
        """Get overflow_strategy value"""
        return self._data.get('overflow_strategy', 'drop_oldest')


class StreamSchema(ConfigSchema):
    """[stream] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def sample_rate(self) -> int:
        """Get sample_rate value"""
        return self._data.get('sample_rate', 16000)

    @property
    def channels(self) -> int:
        """Get channels value"""
        return self._data.get('channels', 1)

    @property
    def silence_timeout(self) -> float:
        """Get silence_timeout value"""
        return self._data.get('silence_timeout', 3.0)

    @property
    def initial_silence_timeout(self) -> float:
        """Get initial_silence_timeout value"""
        return self._data.get('initial_silence_timeout', 10.0)

    @property
    def max_segment_duration(self) -> float:
        """Get max_segment_duration value"""
        return self._data.get('max_segment_duration', 30.0)

    @property
    def enable_vad(self) -> bool:
        """Get enable_vad value"""
        return self._data.get('enable_vad', True)

    @property
    def manual_termination(self) -> bool:
        """Get manual_termination value"""
        return self._data.get('manual_termination', True)

    @property
    def termination_phrase(self) -> str:
        """Get termination_phrase value"""
        return self._data.get('termination_phrase', '結束辨識')

    @property
    def busy_mode(self) -> BusyModeSchema:
        """Get busy_mode configuration"""
        return BusyModeSchema(self._data.get('busy_mode', {}))

    @property
    def buffer(self) -> BufferSchema:
        """Get buffer configuration"""
        return BufferSchema(self._data.get('buffer', {}))


class BatchSchema(ConfigSchema):
    """[batch] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def processing(self) -> int:
        """Get processing value"""
        return self._data.get('processing', 60000)


class NonStreamingSchema(ConfigSchema):
    """[non_streaming] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def activated(self) -> int:
        """Get activated value"""
        return self._data.get('activated', 5000)

    @property
    def recording(self) -> int:
        """Get recording value"""
        return self._data.get('recording', 10000)

    @property
    def transcribing(self) -> int:
        """Get transcribing value"""
        return self._data.get('transcribing', 5000)

    @property
    def llm_claim(self) -> int:
        """Get llm_claim value"""
        return self._data.get('llm_claim', 5000)

    @property
    def tts_claim(self) -> int:
        """Get tts_claim value"""
        return self._data.get('tts_claim', 5000)

    @property
    def session_idle(self) -> int:
        """Get session_idle value"""
        return self._data.get('session_idle', 600000)


class StreamingSchema(ConfigSchema):
    """[streaming] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def activated(self) -> int:
        """Get activated value"""
        return self._data.get('activated', 5000)

    @property
    def streaming(self) -> int:
        """Get streaming value"""
        return self._data.get('streaming', 30000)

    @property
    def llm_claim(self) -> int:
        """Get llm_claim value"""
        return self._data.get('llm_claim', 5000)

    @property
    def tts_claim(self) -> int:
        """Get tts_claim value"""
        return self._data.get('tts_claim', 5000)

    @property
    def session_idle(self) -> int:
        """Get session_idle value"""
        return self._data.get('session_idle', 600000)


class TimeoutConfigsSchema(ConfigSchema):
    """[timeout_configs] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def batch(self) -> BatchSchema:
        """Get batch configuration"""
        return BatchSchema(self._data.get('batch', {}))

    @property
    def non_streaming(self) -> NonStreamingSchema:
        """Get non_streaming configuration"""
        return NonStreamingSchema(self._data.get('non_streaming', {}))

    @property
    def streaming(self) -> StreamingSchema:
        """Get streaming configuration"""
        return StreamingSchema(self._data.get('streaming', {}))


class RecoverySchema(ConfigSchema):
    """[recovery] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def max_retry_attempts(self) -> int:
        """Get max_retry_attempts value"""
        return self._data.get('max_retry_attempts', 3)

    @property
    def retry_delay_ms(self) -> int:
        """Get retry_delay_ms value"""
        return self._data.get('retry_delay_ms', 1000)

    @property
    def auto_recover_from_error(self) -> bool:
        """Get auto_recover_from_error value"""
        return self._data.get('auto_recover_from_error', True)


class EventPrioritiesSchema(ConfigSchema):
    """[event_priorities] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def reset(self) -> int:
        """Get reset value"""
        return self._data.get('reset', 100)

    @property
    def error(self) -> int:
        """Get error value"""
        return self._data.get('error', 90)

    @property
    def recover(self) -> int:
        """Get recover value"""
        return self._data.get('recover', 90)

    @property
    def interrupt_reply(self) -> int:
        """Get interrupt_reply value"""
        return self._data.get('interrupt_reply', 60)

    @property
    def llm_reply_started(self) -> int:
        """Get llm_reply_started value"""
        return self._data.get('llm_reply_started', 50)

    @property
    def tts_playback_started(self) -> int:
        """Get tts_playback_started value"""
        return self._data.get('tts_playback_started', 50)

    @property
    def tts_playback_finished(self) -> int:
        """Get tts_playback_finished value"""
        return self._data.get('tts_playback_finished', 40)

    @property
    def timeout(self) -> int:
        """Get timeout value"""
        return self._data.get('timeout', 30)

    @property
    def default(self) -> int:
        """Get default value"""
        return self._data.get('default', 0)


class FsmSchema(ConfigSchema):
    """[fsm] configuration"""
    
    def __init__(self, data: Dict[str, Any]) -> None:
        self._data = data

    @property
    def default_strategy(self) -> str:
        """Get default_strategy value"""
        return self._data.get('default_strategy', 'NON_STREAMING')

    @property
    def keep_awake_after_reply(self) -> bool:
        """Get keep_awake_after_reply value"""
        return self._data.get('keep_awake_after_reply', True)

    @property
    def timeout_configs(self) -> TimeoutConfigsSchema:
        """Get timeout_configs configuration"""
        return TimeoutConfigsSchema(self._data.get('timeout_configs', {}))

    @property
    def recovery(self) -> RecoverySchema:
        """Get recovery configuration"""
        return RecoverySchema(self._data.get('recovery', {}))

    @property
    def event_priorities(self) -> EventPrioritiesSchema:
        """Get event_priorities configuration"""
        return EventPrioritiesSchema(self._data.get('event_priorities', {}))

# ---------- GENERATED CLASSES END ----------